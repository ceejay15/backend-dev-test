var vows = require('vows');
var BufferList = require('../');
var assert = require('assert');

var list = new BufferList();
list.push(new Buffer(''));
list.push(new Buffer('a'));
list.push(new Buffer('bc'));
list.push(new Buffer('d'));
list.push(new Buffer(''));
list.push(new Buffer('efg'));
list.push(new Buffer('hijklmn'));
list.push(new Buffer('o'));
list.push(new Buffer('p'));
list.push(new Buffer('q'));
list.push(new Buffer(''));
list.push(new Buffer('r'));
list.push(new Buffer(''));
list.push(new Buffer('a'));
list.push(new Buffer(''));

vows.describe('buffer-list/indexOf').addBatch({
    "BufferList's #indexOf with empty buffers": {
        topic: function () {
            this.list = list;
            return list;
        },
        "should function normally": function () {
            assert.equal(this.list.indexOf(new Buffer('a')), 0);
            assert.equal(this.list.indexOf(new Buffer('abcde')), 0);
            assert.equal(this.list.indexOf(new Buffer('bc')), 1);
            assert.equal(this.list.indexOf(new Buffer('bcd')), 1);
            assert.equal(this.list.indexOf(new Buffer('bcde')), 1);
            assert.equal(this.list.indexOf(new Buffer('r')), 17);
            assert.equal(this.list.indexOf(new Buffer('rs')), -1);
        }
    },
    "BufferList's #indexOf with multiple buffers": {
        topic: function () {
            this.list = list;
            return list;
        },
        "Should handle patterns across buffers": function () {
            assert.equal(this.list.indexOf(new Buffer('ab')), 0);
            assert.equal(this.list.indexOf(new Buffer('abc')), 0);
            assert.equal(this.list.indexOf(new Buffer('abcd')), 0);
            assert.equal(this.list.indexOf(new Buffer('op')), 14);
        }
    },
    "BufferList's #indexOf with start and end limit": {
        topic: function () {
            this.list = list;
            return list;
        },
        "Limits should be respected": function () {
            assert.equal(this.list.indexOf(new Buffer('ab'), -1), 0);
            assert.equal(this.list.indexOf(new Buffer('abc'), 1), -1);
            assert.equal(this.list.indexOf(new Buffer('b'), 0, 1), -1);
        }
    }
}).export(module)